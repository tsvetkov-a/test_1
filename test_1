  FUNCTION insert_work(p_category varchar2, p_kind varchar2, p_executor number, p_measure varchar2, p_volume number, p_volume_fact number, p_is_working VARCHAR2, p_no VARCHAR2 DEFAULT NULL, p_are PLS_INTEGER DEFAULT NULL) return number is
/*####################################################################################################################*/
/* Функция добавления работы/этапа в заказ. Возвращает идентификатор работы/этапа.
/*####################################################################################################################*/
    res number(20);
    meas PLS_INTEGER;
    l_meas VARCHAR2(20);
    l_vol NUMBER;
    l_vol_fact NUMBER;
    l_isw VARCHAR2(1);
    cnt_dbl PLS_INTEGER := 0;
    wid PLS_INTEGER;
  BEGIN
    BEGIN
      SELECT id INTO wid FROM ppo_voldates WHERE ord_id = ORDID AND category = p_category AND kind = p_kind AND executor = p_executor;                          -- Проверяем наличие такой же работы в заказе.
      IF nvl(p_no,0) > 0 AND (nvl(ater,'N') = 'Y' OR nvl(reg,'N') = 'Y') AND cnt_prev_ord = 0  THEN                                                             -- Проверяем, создан ли этап с тем же номером в заказе Новой Москвы,
        SELECT count(id) INTO cnt_dbl FROM ppo_voldates WHERE no = p_no AND voldate_id = wid;                                                                   -- а также отсутствие параметра SURV_UND_PREV_ORD.
        IF cnt_dbl > 0 THEN
          RETURN 0;
        ELSE
          SELECT measure, volume, volume_fact,is_working INTO l_meas,l_vol,l_vol_fact,l_isw FROM ppo_voldates WHERE id = wid;
          insert into ppo_voldates(voldate_type, voldate_id, no, done_no, are_id, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
            VALUES('STG', wid, p_no, p_no, p_are, 0, 0, l_meas, l_vol, l_vol_fact, l_isw, 'N', 'N', 'N', 'N') returning id into res;
          return res;
        END IF;
      ELSE
        RETURN 0;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN                                                                                                                                   -- Если работы еще нет, создаем.
        SELECT rv_abbreviation INTO meas FROM cg_ref_codes WHERE rv_domain = 'PPO MEASURE' AND rv_low_value = p_measure;                                        -- Определяется метод округления объема работы по единице измерения.
        insert into ppo_voldates(voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
          VALUES('WORK', ORDID, p_category, p_kind, p_executor, 0, 0, p_measure, case when p_kind = '985' then 0 when NVL(meas,0) = 0 then round(p_volume) else p_volume end, p_volume_fact, p_is_working, 'N', 'N', 'N', 'N')
              returning id into res;
        return res;
    END;
  END insert_work;
  
  
    FUNCTION ppp_volume return number IS
/*####################################################################################################################*/
/* Функция расчёта объёма работы "ппп". Вынужден был отказаться от динамического расчёта по формулам из справочников
/*
Физлица                                     |                            Юрлица
--------------------------------------------|--------------------------------------------------------------
Характер строительства                Объем | Объём                      Кол-во согласований
                                     работы     | заказа
                                                        |               Незастроенная    Застроенная       для ГЗ
                                            |                 территория          территория
Для газификации                             |
(ppo_areas.description like '%газ%')     1      |до 1 га          не менее 6     не менее 12     не менее 12
                                            |от 1 до 5 га     не менее 10    не менее 15     не менее 15
                                            |от 5 до 10 га    не менее 15    не менее 17     не менее 17
                                            |от 10 до 30 га   не менее 23    не менее 27     не менее 30
Не для газификации                          |от 30 до 60 га   не менее 27    не менее 32     не менее 40
(ppo_areas.description not like '%газ%') 10 |от 60 до 90 га   не менее 32    не менее 37     не менее 45
                                            |от 90 до 120 га  не менее 37    не менее 41         не менее 50

Работать должно так.

если заказ ГЗ – берем  столбец 3 в зависимости от площади заказа;
если не ГЗ и на территории заказа есть предприятие или застроенная тер-рия, то берем по 2 столбцу в зависимости от площади заказа;
если не ГЗ и на территории заказа нет предприятия или застроенной тер-рии, то берем по 1 столбцу в зависимости от площади заказа.
/*####################################################################################################################*/
    etype VARCHAR2(1);
    fs VARCHAR2(10);
    l_ater VARCHAR2(1);
    l_reg VARCHAR2(1);
    pvol NUMBER;
    l_cnt NUMBER;
    psq NUMBER;
  BEGIN
    select e.ent_type, o.fin_source, o.att_terr, o.region, (select round(sum(square_gra/10000),2) from centroid_ppo where numberarea = o.id)
      into etype, fs, l_ater, l_reg, pvol
      from ppo_orders o left join ent_entities e on e.id = o.ent_id
      where o.id = ordid;
    IF NVL(l_ater,'N') = 'N' AND NVL(l_reg,'N') = 'N' THEN
      RETURN 1;
    END IF;
    IF nvl(etype,'Ю') = 'Ф' THEN
      SELECT COUNT(id) INTO l_cnt FROM ppo_areas WHERE ord_id = ORDID AND description LIKE '%газ%';
      IF l_cnt > 0 THEN
        RETURN 1;
      ELSE
        RETURN 10;
      END IF;
    END IF;
    IF NVL(fs,'N') = 'гз' THEN
      IF pvol <= 1 THEN RETURN 12;
      ELSIF pvol <= 5 THEN RETURN 15;
      ELSIF pvol <= 10 THEN RETURN 17;
      ELSIF pvol <= 30 THEN RETURN 30;
      ELSIF pvol <= 60 THEN RETURN 40;
      ELSIF pvol <= 90 THEN RETURN 45;
      ELSE RETURN 50;
      END IF;
    END IF;
    SELECT SUM(square) INTO psq FROM ppo_smeta_terr WHERE terr_type IN (1,3);
    IF psq > 0 THEN
      IF pvol <= 1 THEN RETURN 12;
      ELSIF pvol <= 5 THEN RETURN 15;
      ELSIF pvol <= 10 THEN RETURN 17;
      ELSIF pvol <= 30 THEN RETURN 27;
      ELSIF pvol <= 60 THEN RETURN 32;
      ELSIF pvol <= 90 THEN RETURN 37;
      ELSE RETURN 41;
      END IF;
    END IF;
    IF pvol <= 1 THEN RETURN 6;
    ELSIF pvol <= 5 THEN RETURN 10;
    ELSIF pvol <= 10 THEN RETURN 15;
    ELSIF pvol <= 30 THEN RETURN 23;
    ELSIF pvol <= 60 THEN RETURN 27;
    ELSIF pvol <= 90 THEN RETURN 32;
    ELSE RETURN 37;
    END IF;
  END ppp_volume;


    FUNCTION get_int_borders(text_int varchar2, border_no pls_integer) return number is
    begin
      return to_number(regexp_substr(text_int, '\d+(\.\d+){0,1}', 1, border_no),'FM99999D9','NLS_NUMERIC_CHARACTERS = ''.,''');
    end get_int_borders;

    FUNCTION get_int_sum(p_s NUMBER, p_bp PLS_INTEGER, out_cod OUT PLS_INTEGER) RETURN NUMBER IS
      l_c NUMBER;
    BEGIN
      FOR rec_a IN (SELECT DISTINCT par_cod,bp_method FROM ref_base_price WHERE group_no = p_bp AND e_date IS NULL) LOOP
        IF rec_a.bp_method = 'I' AND rec_a.par_cod != 53 THEN
          FOR rec_b IN (SELECT value_cod,value_text FROM class_param_values WHERE param_cod = rec_a.par_cod AND value_cod IN
            (SELECT DISTINCT val_cod FROM ref_base_price WHERE group_no = p_bp)) LOOP
            IF p_s > get_int_borders(rec_b.value_text,1) AND p_s <= NVL(get_int_borders(rec_b.value_text,2),1000000) THEN
              SELECT DISTINCT cod, base_price INTO out_cod, l_c FROM ref_base_price WHERE group_no = p_bp AND par_cod = rec_a.par_cod AND val_cod = rec_b.value_cod AND e_date IS NULL;
              RETURN l_c;
            END IF;
          END LOOP;
        END IF;
      END LOOP;
      RETURN 0;
    END get_int_sum;

  BEGIN
    SELECT id INTO curinf FROM ref_infl WHERE priority = 11 AND nvl(e_date,SYSDATE+1) > SYSDATE;                                                                -- для сметы ОПС берём инфляцию с приоритетом 11 !!!
/*####################################################################################################################*/
    FOR rec IN
      (SELECT c.obj_size, r.base_group FROM cross_ops_com c, ref_com_bgroup r WHERE c.ord_id = ORDID AND nvl(c.rc_id,0) = nvl(r.rc_id,0) and nvl(c.cadd_id,0) = nvl(r.cadd_id,0) AND c.obj_size IS NOT NULL
      UNION ALL
      SELECT c.obj_size, NULL base_group FROM cross_ops_com c WHERE c.ord_id = ORDID AND c.rc_id IS NULL AND c.cadd_id IS NULL AND c.obj_size IS NOT NULL
      ORDER BY base_group nulls LAST) LOOP
      p_obj_size := rec.obj_size;
      IF rec.base_group IS NOT NULL THEN                                                                                                                        -- линейный объект
        p_bg := rec.base_group;
        sum_length := sum_length + p_obj_size;
        CASE p_bg
          WHEN 573 THEN s := p_obj_size;
          WHEN 574 THEN s := 2 * p_obj_size;
          WHEN 575 THEN s := 3 * p_obj_size;
          ELSE s := p_obj_size;
        END CASE;
        FOR rec2 IN (SELECT DISTINCT par_cod,bp_method FROM ref_base_price WHERE group_no = p_bg AND e_date IS NULL) LOOP
          SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = p_bg AND e_date IS NULL;
          IF rec2.bp_method = 'I' AND rec2.par_cod != 53 THEN
            FOR rec3 IN (SELECT value_cod,value_text FROM class_param_values WHERE param_cod = rec2.par_cod AND value_cod IN (SELECT DISTINCT val_cod FROM ref_base_price WHERE group_no = p_bg)) LOOP
              IF p_obj_size > get_int_borders(rec3.value_text,1) AND p_obj_size <= NVL(get_int_borders(rec3.value_text,2),1000000) THEN
                old_vol := 0;
                res := 0;
                FOR rec4 IN (SELECT id FROM ppo_voldates WHERE ord_id = ORDID AND CATEGORY = l_cat AND kind = l_kind AND executor = l_exec) LOOP
                  old_vol := old_vol + 1;
                  res := rec4.id;
                END LOOP;
                IF old_vol = 0 THEN
DBMS_OUTPUT.put_line('Линия. kind = '||l_kind||';volume='||p_obj_size||';new');
                  insert into ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
                    VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, 0, 0, 'Y', 'N', 'N', 'N', 'N')
                    RETURNING id INTO res;
                  last_smeta := 0;
                ELSE
                  SELECT NVL(MAX(smeta_no),0) INTO last_smeta FROM ppo_smeta_header_new WHERE ppo_stages_id = res;
DBMS_OUTPUT.put_line('Линия. kind = '||l_kind||';volume='||p_obj_size||';id='||res);
                END IF;
                SELECT DISTINCT cod, base_price INTO scod, c1 FROM ref_base_price WHERE group_no = p_bg AND par_cod = rec2.par_cod AND val_cod = rec3.value_cod AND e_date IS NULL;
                sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => last_smeta + 1, p_bp_id => scod, sq_type => null,
                  p_volume => p_obj_size, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => n_list(269,270,271), p_stg_no => 0);
                UPDATE ppo_voldates SET volume = volume + p_obj_size WHERE id = res;
/*####################################################################################################################*/
              END IF;
            END LOOP;
          END IF;
        END LOOP;
      ELSE                                                                                                                                                      -- площадной объект
        SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 577 AND e_date IS NULL;
        old_vol := 0;
        res := 0;
        FOR rec4 IN (SELECT id FROM ppo_voldates WHERE ord_id = ORDID AND CATEGORY = l_cat AND kind = l_kind AND executor = l_exec ORDER BY id) LOOP
          old_vol := old_vol + 1;
          res := rec4.id;
        END LOOP;
        IF old_vol = 0 THEN
DBMS_OUTPUT.put_line('Площадь. kind = '||l_kind||';volume='||p_obj_size||';new');
          INSERT INTO ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
            VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, 0, 0, 'Y', 'N', 'N', 'N', 'N')
            RETURNING id INTO res;
          last_smeta := 0;
        ELSE
          SELECT NVL(MAX(smeta_no),0) INTO last_smeta FROM ppo_smeta_header_new WHERE ppo_stages_id = res;
DBMS_OUTPUT.put_line('Площадь. kind = '||l_kind||';volume='||p_obj_size||';id='||res);
        END IF;
        c1 := get_int_sum(p_obj_size,577,scod);
        sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => last_smeta + 1, p_bp_id => scod, sq_type => null,
          p_volume => p_obj_size, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => n_list(269,270,271), p_stg_no => 0);
        UPDATE ppo_voldates SET volume = volume + p_obj_size WHERE id = res;
      END IF;
    END LOOP;
/*####################################################################################################################*/
    s := 0;
    sum_length := 0;
    FOR rec in (select SUM(c.obj_size) obj_size, r.base_group from cross_ops_com c, ref_com_bgroup r                                                            -- отдельно работа 1004 "Рассмотрение проектов стройгенпланов..."
      WHERE c.ord_id = ORDID AND nvl(c.rc_id,0) = nvl(r.rc_id,0) and nvl(c.cadd_id,0) = nvl(r.cadd_id,0) AND c.obj_size IS NOT NULL
      GROUP BY r.base_group) LOOP
      p_bg := rec.base_group;
      p_obj_size := rec.obj_size;
      sum_length := sum_length + p_obj_size;
      CASE p_bg
        WHEN 573 THEN s := s + p_obj_size;
        WHEN 574 THEN s := s + 2 * p_obj_size;
        WHEN 575 THEN s := s + 3 * p_obj_size;
        ELSE s := s + p_obj_size;
      END CASE;
    END LOOP;
    IF sum_length > 0 THEN
      sum_length := sum_length/10000;
      s := s/10000;
    END IF;
    IF sum_length > 0 THEN
      SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 577 AND e_date IS NULL;
      old_vol := 0;
      res := 0;
      FOR rec4 IN (SELECT id FROM ppo_voldates WHERE ord_id = ORDID AND CATEGORY = l_cat AND kind = l_kind AND executor = l_exec ORDER BY id) LOOP
        old_vol := old_vol + 1;
        res := rec4.id;
      END LOOP;
      IF old_vol = 0 THEN
DBMS_OUTPUT.put_line('1004. kind = '||l_kind||';volume='||p_obj_size||';new');
        insert into ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
          VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, 0, 0, 'Y', 'N', 'N', 'N', 'N')
          RETURNING id INTO res;
        last_smeta := 0;
      ELSE
        SELECT NVL(MAX(smeta_no),0) INTO last_smeta FROM ppo_smeta_header_new WHERE ppo_stages_id = res;
DBMS_OUTPUT.put_line('1004. kind = '||l_kind||';volume='||p_obj_size||';id='||res);
      END IF;
      c4 := get_int_sum(s,577,scod);
      sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => last_smeta + 1, p_bp_id => scod, sq_type => null,
        p_volume => sum_length, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => n_list(269,270,271), p_stg_no => 0);
      UPDATE ppo_voldates SET volume = volume + sum_length WHERE id = res;
    END IF;
/*####################################################################################################################*/
    s := 0;
    sum_length := 0;
    FOR rec in (select SUM(c.obj_size) obj_size, r.base_group from cross_ops_com c, ref_com_bgroup r                                                            -- отдельно работа 999 "Проверка участка..."
      WHERE c.ord_id = ORDID AND nvl(c.rc_id,0) = nvl(r.rc_id,0) and nvl(c.cadd_id,0) = nvl(r.cadd_id,0) AND c.obj_size IS NOT NULL
      GROUP BY r.base_group) LOOP
      p_bg := rec.base_group;
      p_obj_size := rec.obj_size;
      sum_length := sum_length + p_obj_size;
      CASE p_bg
        WHEN 573 THEN s := s + p_obj_size;
        WHEN 574 THEN s := s + 2 * p_obj_size;
        WHEN 575 THEN s := s + 3 * p_obj_size;
        ELSE s := s + p_obj_size;
      END CASE;
    END LOOP;
    IF sum_length > 0 THEN
      sum_length := sum_length/10000;
      s := s/10000;
    END IF;
    FOR rec IN (SELECT SUM(obj_size) obj_size from cross_ops_com WHERE ord_id = ORDID AND rc_id IS NULL AND cadd_id IS NULL AND obj_size IS NOT NULL) LOOP
      p_obj_size := rec.obj_size;
      sum_length := sum_length + p_obj_size;
      s := s + p_obj_size;
    END LOOP;
    IF sum_length > 0 THEN
      SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 572 AND e_date IS NULL;
DBMS_OUTPUT.put_line('999. kind = '||l_kind||';volume='||sum_length||';new');
      insert into ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
        VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, sum_length, 0, 'Y', 'N', 'N', 'N', 'N')
        RETURNING id INTO res;
      c4 := get_int_sum(s,572,scod);
      sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => 1, p_bp_id => scod, sq_type => null,
        p_volume => sum_length, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => n_list(269,270,271), p_stg_no => 0);
    END IF;
/*####################################################################################################################*/
    sum_length := 0;
    FOR rec IN (SELECT SUM(dot_num) dot_num from cross_ops_com where ord_id = ORDID AND nvl(dot_num,0) > 0) LOOP                                                -- точечные объекты
      p_dot_num := rec.dot_num;
      sum_length := sum_length + p_dot_num;
    END LOOP;
    IF sum_length > 0 THEN
      SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 580 AND e_date IS NULL;
DBMS_OUTPUT.put_line('dots. kind = '||l_kind||';volume='||sum_length||';new');
      INSERT into ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
        VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, sum_length, 0, 'Y', 'N', 'N', 'N', 'N')
        RETURNING id INTO res;
      SELECT DISTINCT cod, base_price INTO scod, c6 FROM ref_base_price WHERE group_no = 580 AND e_date IS NULL;
      sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => 1, p_bp_id => scod, sq_type => null,
        p_volume => sum_length, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => n_list(269,270,271), p_stg_no => 0);
    END IF;
/*####################################################################################################################*/
    FOR rec IN (SELECT id FROM cross_ops_com c WHERE c.ord_id = ORDID) LOOP                                                                                     -- общие работы к любым объектам
      SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 581 AND e_date IS NULL;
DBMS_OUTPUT.put_line('1008. kind = '||l_kind||';volume='||sum_length||';new');
      INSERT INTO ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
        VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, 1, 0, 'Y', 'N', 'N', 'N', 'N')
        RETURNING id INTO res;
      SELECT DISTINCT cod, base_price INTO scod, c2 FROM ref_base_price WHERE group_no = 581 AND e_date IS NULL;
      sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => 1, p_bp_id => scod, sq_type => null,
        p_volume => 1, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => NULL, p_stg_no => 0);
/*####################################################################################################################*/
      SELECT complex, name, department, measure INTO l_cat, l_kind, l_exec, l_measure FROM class_works WHERE base_group = 582 AND e_date IS NULL;
DBMS_OUTPUT.put_line('1009. kind = '||l_kind||';volume='||sum_length||';new');
      INSERT INTO ppo_voldates (voldate_type, ord_id, category, kind, executor, value, value_fact, measure, volume, volume_fact, is_working, cancelled, multilines, in_doc, fkp_reestr)
        VALUES ('WORK', ORDID, l_cat, l_kind, l_exec, 0, 0, l_measure, 1, 0, 'Y', 'N', 'N', 'N', 'N')
        RETURNING id INTO res;
      SELECT DISTINCT cod, base_price INTO scod, c2 FROM ref_base_price WHERE group_no = 582 AND e_date IS NULL;
      sid := insert_smeta(p_vld_id => res, p_type => vc_list('П'), p_no => 1, p_bp_id => scod, sq_type => null,
        p_volume => 1, p_measure => l_measure, p_size_type => 0, p_ki => curinf, p_thin => 0, p_accel => 1, p_coeff_id => NULL, p_stg_no => 0);
      EXIT;
    END LOOP;
  EXCEPTION
    when others then
      NULL;
  END get_rc_price;
  
  
  PROCEDURE make_smeta_complex (comp_in VARCHAR2 DEFAULT NULL) IS
/*####################################################################################################################*/
/* Создание сметы на комплекс
/*####################################################################################################################*/
    comp_id VARCHAR2(255);
    l_orglik NUMBER := NULL;
    l_period NUMBER := NULL;
    l_ppercent NUMBER := NULL;
    l_transport NUMBER := NULL;
    l_payment NUMBER := NULL;
    l_expense NUMBER := NULL;
    dist NUMBER := NULL;
    cyear VARCHAR2(4) := TO_CHAR(SYSDATE,'YYYY');
    cmp_i PLS_INTEGER := 0;
    sum_ord NUMBER := 0;
    min_sum NUMBER := 16843;                                                                                                                                    -- "Минималььно допустимая" стоимость заказа
    calc_err NUMBER;
  BEGIN
    IF comp_in IS NULL THEN
      SELECT cw.complex INTO comp_id FROM class_works cw JOIN ref_work_cat rwc on cw.id = rwc.cw_id WHERE rwc.part = part_in AND rwc.priority = 1;              -- Вычисляем базовый комплекс работ
    ELSE
      comp_id := comp_in;
    END IF;
    IF (cnt_surv > 0 AND comp_in IS NULL) OR cnt_tree > 0 THEN                                                                                                  -- Если есть полевые работы, в расчет добавляются коэффициенты:
      SELECT coeff_value INTO l_orglik FROM ref_coeff WHERE id = 69;                                                                                            -- Организации и ликвидации работ
      IF /*ko = 2 OR nvl(fsource,'N') = 'гз'*/ko_mrr = 2 THEN
        SELECT coeff_value INTO l_payment FROM ref_coeff WHERE id = 53;                                                                                         -- Без выплаты полевого довольствия
      END IF;
      SELECT coeff_value INTO l_transport FROM ref_coeff WHERE id = 14;                                                                                         -- Внутренний транспорт, исходя из
      BEGIN
        SELECT VALUE INTO dist FROM ppo_ord_attrs WHERE ord_id = ORDID AND NAME = 'ADD_OBJ_DISTANCE';                                                           -- расстояния до объекта
      EXCEPTION
        WHEN OTHERS THEN
          dist := NULL;
      END;
      IF ko_mrr = 2 THEN
        IF SYSDATE >= worktime.addworkdays(TO_DATE('20.10.'||cyear,'DD.MM.YYYY'),-5) OR SYSDATE < worktime.addworkdays(TO_DATE('05.05.'||cyear,'DD.MM.YYYY'),-5) THEN
            SELECT coeff_value INTO l_period FROM ref_coeff WHERE id = 13;                                                                                      -- Неблагоприятный период года
            l_ppercent := 100;
        END IF;
      ELSE
        IF SYSDATE >= worktime.addworkdays(TO_DATE('20.10.'||cyear,'DD.MM.YYYY'),-5) OR SYSDATE < worktime.addworkdays(TO_DATE('31.03.'||cyear,'DD.MM.YYYY'),-5) THEN
            l_period := 1.15;                                                                                                                                   -- Неблагоприятный период года
            l_ppercent := 100;
        END IF;
      END IF;
    END IF;
    IF nvl(fsource,'N') != 'гз' THEN                                                                                                                            -- Непредвиденные расходы
      IF ovol < 5 THEN
        l_expense := 1.3;
      ELSE
        l_expense := 1.1;
      END IF;
    END IF;
    FOR rec IN (                                                                                                                                                -- Здесь используется цикл для создания смет на каждый номер этапа
      SELECT NO FROM ppo_voldates WHERE voldate_id IN (SELECT id FROM ppo_voldates WHERE ord_id = ORDID) GROUP BY NO                                            -- или на заказ целиком. Сметы предварительная и исполниительная.
      UNION
      SELECT NO FROM ppo_voldates WHERE ord_id = ORDID GROUP BY NO
      ORDER BY NO nulls LAST
    ) LOOP
      cmp_i := cmp_i + 1;
      IF cmp_i > 1 AND rec.NO IS NULL THEN EXIT; END IF;                                                                                                        -- Если сметы на этапы уже созданы, выходим, не создавая смету на заказ.
      INSERT INTO ppo_smeta_new_complex (SMETA_TYPE, K_INFL_SEC, K_INFL_PERCENT, K_ACCEL, ACCEL_TYPE, K_INFL, COMPLEX_ID, ORD_ID, NO, K_ORGLIK, K_PERIOD, K_TRANSPORT, PERIOD_PERCENT, K_PAYMENT, DISTANCE, K_EXPENSE)
        VALUES ('П', NULL, 100, curacc, acctype, curinf, comp_id, ORDID, rec.no,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_orglik END,                                                                                            -- Общие полевые коэффициенты не добавляются во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_period END,                                                                                            -- Общие полевые коэффициенты не добавляются во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_transport END,                                                                                         -- Общие полевые коэффициенты не добавляются во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_ppercent END,                                                                                          -- Общие полевые коэффициенты не добавляются во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_payment END,                                                                                           -- Общие полевые коэффициенты не добавляются во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE dist END,                                                                                                -- Расстояние до объекта не добавляется во второй этап.
        CASE WHEN NVL(rec.NO,'0') = '2' THEN l_expense ELSE NULL END);
      calc_cost_real_new(ORDID, calc_err);                                                                                                                      -- Пришлось вставить между сметами расчет реальных стоимостей!
      INSERT INTO ppo_smeta_new_complex (SMETA_TYPE, K_INFL_SEC, K_INFL_PERCENT, K_ACCEL, ACCEL_TYPE, K_INFL, COMPLEX_ID, ORD_ID, NO, K_ORGLIK, K_PERIOD, K_TRANSPORT, PERIOD_PERCENT, K_PAYMENT, DISTANCE, K_EXPENSE)
        VALUES ('И', NULL, 100, curacc, acctype, curinf, comp_id, ORDID, rec.no,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_orglik END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_period END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_transport END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_ppercent END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE l_payment END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN NULL ELSE dist END,
        CASE WHEN NVL(rec.NO,'0') = '2' THEN l_expense ELSE NULL END);                                                                                          -- Непредвиденные расходы добавляются только во второй этап.
    END LOOP;
    IF nvl(fsource,'N') != 'гз' AND cnt_surv > 0 AND oscale in ('1','2') THEN                                                                                   -- Для 200-ки и 500-ки не по Госзаданию и при наличии полевых работ следует проверять конечную стоимость
      SELECT SUM(VALUE) INTO sum_ord FROM ppo_smeta_new_complex WHERE ord_id = ORDID AND complex_id = comp_id AND smeta_type = 'П';                             -- заказа (с учетом всех коэффициентов, но без учета НДС) и, если стоимость менее min_sum, требуется применить
      IF sum_ord < min_sum THEN                                                                                                                                 -- дополнительный к-т для увеличения стоимости заказа до этой суммы и сохранить это значение в поле "договорной к-т".
        UPDATE ppo_smeta_new_complex SET k_accel = ROUND(NVL(k_accel,1) * (min_sum / NVL(sum_ord,1)),4) WHERE ord_id = ORDID AND complex_id = comp_id;          -- Значение к-та рассчитывается по формуле k_accel=min_sum/Стоимость заказа.
      END IF;                                                                                                                                                   -- Если значение k_accel до пересчета уже было заполнено, то значения старого к-та и нового
    END IF;                                                                                                                                                     -- перемножаются  и сохраняется пересчитанное значение.
    calc_cost_real_new(ORDID, calc_err);
  END make_smeta_complex;
  
  
